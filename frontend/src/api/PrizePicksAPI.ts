
// src/api/PrizePicksAPI.ts\n\ninterface PrizePicksAPIConfig {\n  apiKey: string; // This might be your VITE_PRIZEPICKS_API_KEY\n  baseUrl: string;\n}\n\n// --------- REQUEST/RESPONSE TYPE DEFINITIONS FOR PRIZEPICKS API --------- //\n// These are placeholders and NEED to be adjusted based on actual PrizePicks API responses.\n\nexport interface RawPrizePicksProjection {\n  id: string; // Projection ID, e.g., \"7173004\"\n  type: string; // Usually \"projection\"\n  attributes: {\n    line_score: number; // The actual line, e.g., 27.5\n    stat_type: string; // e.g., \"Points\", \"Rebounds\", \"Fantasy Score\"\n    description: string; // e.g., \"LeBron James OVER 27.5 Points\"\n    odds_type: string; // e.g., \"standard\", \"flex_play_discount\"\n    start_time: string; // ISO Date string, e.g., \"2023-10-24T23:30:00.000Z\"\n    is_promo: boolean;\n    // Add any other relevant attributes from the API\n    [key: string]: any;\n  };\n  relationships: {\n    new_player: {\n      data: {\n        id: string; // Player ID, e.g., \"2005\"\n        type: string; // Usually \"new_player\"\n      };\n    };\n    league: {\n      data: {\n        id: string; // League ID, e.g., \"7\"\n        type: string; // Usually \"league\"\n      };\n    };\n    // Other relationships like \'stat_type\', \'game\', etc.\n    [key: string]: any;\n  };\n}\n\nexport interface RawPrizePicksPlayer {\n  id: string; // Player ID\n  type: string; // Usually \"new_player\"\n  attributes: {\n    name: string; // e.g., \"LeBron James\"\n    team_name: string; // e.g., \"Los Angeles Lakers\"\n    position: string; // e.g., \"SF\"\n    image_url?: string;\n    // Add any other relevant attributes\n    [key: string]: any;\n  };\n}\n\nexport interface RawPrizePicksLeague {\n  id: string; // League ID\n  type: string; // Usually \"league\"\n  attributes: {\n    name: string; // e.g., \"NBA\"\n    sport: string; // e.g., \"Basketball\"\n    // Add any other relevant attributes\n    [key: string]: any;\n  };\n}\n\n// Union type for the \'included\' array in JSON:API responses\nexport type PrizePicksIncludedResource = RawPrizePicksPlayer | RawPrizePicksLeague; \n\n// Generic structure for a PrizePicks JSON:API response\nexport interface PrizePicksAPIResponse<TData> {\n  data: TData[];\n  included?: PrizePicksIncludedResource[];\n  meta?: { \n    total_pages?: number; \n    current_page?: number; \n    total_count?: number;\n    [key: string]: any;\n  };\n  links?: { \n    self?: string; \n    next?: string; \n    prev?: string; \n    [key: string]: any;\n  };\n}\n\n// --------------------- PRIZEPICKS API CLIENT CLASS --------------------- //\n\nexport class PrizePicksAPI {\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n\n  constructor(config: PrizePicksAPIConfig) {\n    this.apiKey = config.apiKey; // VITE_PRIZEPICKS_API_KEY will be passed here\n    this.baseUrl = config.baseUrl || \'https://api.prizepicks.com\'; // Default base URL\n  }\n\n  private async request<TResponse>( // Generic type for the expected response structure\n    endpoint: string,\n    params?: Record<string, string | number | boolean>\n  ): Promise<TResponse> {\n    const url = new URL(`${this.baseUrl}${endpoint}`);\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, String(value));\n        }\n      });\n    }\n\n    const headers: Record<string, string> = {\n      \'Accept\': \'application/vnd.api+json\',\n      // \'User-Agent\': \'YourAppName/1.0 (contact@example.com)\', // It\'s good practice to set a User-Agent\n      // Authorization might be needed for some endpoints. \n      // If PrizePicks API key is a Bearer token:\n      // \'Authorization\': `Bearer ${this.apiKey}`,\n      // Or if it\'s a custom header like \'X-Api-Key\':\n      // \'X-Api-Key\': this.apiKey,\n    };\n    \n    // IMPORTANT: The VITE_PRIZEPICKS_API_KEY is available via import.meta.env.VITE_PRIZEPICKS_API_KEY\n    // This key should be passed in the config. How it\'s used (header, query param) depends on PrizePicks API docs.\n    // The current setup assumes it might be used in a header, or not at all if endpoints are public.\n\n    \n\n    try {\n      const response = await fetch(url.toString(), {\n        method: \'GET\',\n        headers,\n      });\n\n      if (!response.ok) {\n        const errorBody = await response.text();\n        console.error(`[PrizePicksAPI] API Error ${response.status}: ${errorBody}`);\n        throw new Error(`[PrizePicksAPI] Request failed with status ${response.status}: ${errorBody}`);\n      }\n      \n      return await response.json() as TResponse;\n\n    } catch (error) {\n      console.error(\`[PrizePicksAPI] Network or parsing error for ${url.toString()}:\`, error);\n      // Re-throw a more specific error or handle as needed\n      if (error instanceof Error && error.message.startsWith(\'[PrizePicksAPI]\')) throw error;\n      throw new Error(`[PrizePicksAPI] Request failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Fetches projections (props) from PrizePicks.\n   * Common public endpoint: /projections\n   * Common query params: league_id, single_stat=true, page[number], page[size]\n   */\n  async fetchProjections(\n    leagueId?: string, \n    page: number = 1,\n    perPage: number = 50 // PrizePicks default/max can vary\n  ): Promise<PrizePicksAPIResponse<RawPrizePicksProjection>> {\n    // NOTE: VERIFY THIS ENDPOINT AND PARAMS WITH ACTUAL PRIZEPICKS DOCUMENTATION / NETWORK REQUESTS\n    const endpoint = \'/projections\'; \n    const queryParams: Record<string, string | number | boolean> = {\n      \'page[number]\': page,\n      \'page[size]\': perPage,\n      \'single_stat\': \'true\', // This is often crucial\n      // \'status\': \'active\', // To get only currently available lines\n    };\n\n    if (leagueId) {\n      queryParams.league_id = leagueId;\n    }\n\n    return this.request<PrizePicksAPIResponse<RawPrizePicksProjection>>(endpoint, queryParams);\n  }\n\n  // Example of fetching details for a specific league if needed\n  // async fetchLeague(leagueId: string): Promise<PrizePicksAPIResponse<RawPrizePicksLeague>> {\n  //   const endpoint = `/leagues/${leagueId}`;\n  //   return this.request<PrizePicksAPIResponse<RawPrizePicksLeague>>(endpoint);\n  // }\n\n  // Add more methods as needed:\n  // - Fetching player details\n  // - Fetching game details\n  // - Fetching specific projection by ID\n}\n